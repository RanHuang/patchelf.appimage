name: AppImage
on:
  push:
    branches:
      - master

jobs:
  Build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, i686, aarch64]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/checkout@v2
      with:
        repository: NixOS/patchelf
        path: patchelf
        ref: 0.13.1

    - name: Set up QEMU
      if: contains(matrix.arch, 'aarch64')
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: arm64

    - name: Compile
      run: |
        PRE_CMD=""
        if [[ "${{ matrix.arch }}" == "i686" ]]; then
          PRE_CMD="linux32"
        fi
        SCRIPT=$(cat <<-END
          ${PRE_CMD}
          set -ex
          cd /pwd/patchelf
          ./bootstrap.sh
          ./configure --prefix="/pwd/AppDir/usr"
          make
          make install
          strip "/pwd/AppDir/usr/bin/patchelf"
        END
        )
        if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
          MANYLINUX=manylinux2014_aarch64
        else
          MANYLINUX=manylinux1_${{ matrix.arch }}
        fi
        docker run --mount type=bind,source=$(pwd),target=/pwd                 \
                   quay.io/pypa/${MANYLINUX} /bin/bash -c                      \
                   "${SCRIPT}"

    - name: Package
      run: |
        wget -cq https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod u+x appimagetool-x86_64.AppImage
        ln -s patchelf.png AppDir/.DirIcon
        ln -s usr/bin/patchelf AppDir/AppRun
        if [[ ${{ matrix.arch }} == "x86_64" ]]; then
          RUNTIME_FILE=
        else
          wget -cq https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-${{ matrix.arch }}.AppImage
          chmod u+x appimagetool-${{ matrix.arch }}.AppImage
          RUNTIME_FILE="--runtime-file appimagetool-${{ matrix.arch }}.AppImage"
        fi
        ./appimagetool-x86_64.AppImage ${RUNTIME_FILE} AppDir
        echo "PATCHELF_APPIMAGE=$(ls patchelf-*.AppImage)" >> $GITHUB_ENV

    - uses: actions/upload-artifact@v1
      with:
        name: appimages
        path: ${{ env.PATCHELF_APPIMAGE }}

  Release:
    needs: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: appimages

    - run: ls -lha appimages

    - name: Release
      uses: marvinpinto/action-automatic-releases@latest
      with:
        automatic_release_tag: rolling
        title: Rolling release
        files: appimages/patchelf-*.AppImage
        repo_token: ${{ secrets.GITHUB_TOKEN }}
